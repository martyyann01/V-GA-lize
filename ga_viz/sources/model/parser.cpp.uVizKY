#include <QFile>
#include <QUrl>
#include <QDebug>
#include <vector>

#include "parser.h"

Parser::Parser()
{

}

void Parser::parseFile(QUrl fileUrl, Population** population)
{
    this->fileUrl = fileUrl;
    this->population = population;
    start();
}

/* <chromosome-type> <numpop> <numgen> <numcluster> <numind> <fitness> <numchr> chromosome-vals   */

void Parser::run()
{
    QFile *data = new QFile(fileUrl.toString(QUrl::RemoveScheme));
    if (!data->open(QFile::ReadOnly))
        return;

    QTextStream input(data);
    ChromosomeDataType cdt;
    int token = 0;
    input >> token;
    cdt = static_cast<ChromosomeDataType> (token);
    int numpop = 0;
    input >> numpop;
    // TODO: assume for now that number of pop is only 1
    assert(numpop == 1);

    *population = new Population[numpop];
    for (int np=0; np<numpop; np++)
    {
            int numgen = 0;
            input >> numgen;
            (*population)[np].setNumGenerations(numgen);
            for(int ng=0; ng < numgen; ng++) {

                Generation* gen = (*population)[np].getGenerations(ng);

                int numcluster = 0;
                input >> numcluster;
                gen->setNumClusters(numcluster);

                for (int nc=0; nc<numcluster; nc++) {

                    int numind = 0;
                    input >> numind;
                    for (int ni=0; ni<numind; ni++) {
                         float fitness;
                         input >> fitness;
                         int  chrsize;
                         input >> chrsize;

                         Individual ind;
                         ind.setRank(ni);
                         ind.setGeneration(numgen);
                         ind.setCluster(nc);
                         ind.setFitness(fitness);

                         ChromosomeType ct;
                         switch (cdt) {
                            case FLOAT:
                             ct.arrayf = new float[chrsize];
                             for (int ch=0; ch<chrsize; ch++) {
                                 input >> ct.arrayf[ch];
                             }
                             ind.setChromosomes(ct, fitness);
                             break;
                            case INTEGER:
                             ct.arrayI = new int[chrsize];
                             for (int ch=0; ch<chrsize; ch++) {
                                 input >> ct.arrayI[ch];
                             }
                             ind.setChromosomes(ct, fitness);
                             break;
                            case DOUBLE:
                             ct.arrayD = new double[chrsize];
                             for (int ch=0; ch<chrsize; ch++) {
                                 input >> ct.arrayD[ch];
                             }
                             ind.setChromosomes(ct, fitness);
                             break;
                            case CHAR:
                             ct.arrayC = new char[chrsize];
                             for (int ch=0; ch<chrsize; ch++) {
                                 input >> ct.arrayC[ch];
                             }
                             ind.setChromosomes(ct, fitness);
                             break;
                            case STRING:
                             ct.arrayS = new QString[chrsize];
                             for (int ch=0; ch<chrsize; ch++) {
                                 input >> ct.arrayS[ch];
                             }
                             ind.setChromosomes(ct, fitness);
                             break;
                         }

                    }

                }
            }
    }

}


