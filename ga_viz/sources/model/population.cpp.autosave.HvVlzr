#include <QQmlEngine>

#include "population.h"

Population::Population() :
    nbGenerations(0), nbObjectiveFunctions(0)
{

}

int generation, int indexInGeneration, int property, bool clustered = false
void Population::addIndividual(int generation, int cluster, int indexInGeneration, int globalIndex, int nbMutations, int nbCrossovers, int parent1, int parent2)
{
    generations[generation].addIndividual(generation, cluster, indexInGeneration, globalIndex, nbMutations, nbCrossovers, parent1, parent2);
}

QVariant Population::getIndividualProperty(int generation, int indexInGeneration, int property, bool clustered) const
{
    if (generation >= 0 && generation < nbGenerations && indexInGeneration >= 0 && indexInGeneration < nbIndividualsPerGeneration)
    {
        switch(property)
        {
            case Individual::Generation: return generations[generation].getIndividual(indexInGeneration, clustered)->getGeneration(); break;
            case Individual::Cluster: return generations[generation].getIndividual(indexInGeneration, clustered)->getCluster(); break;
            case Individual::Rank: return generations[generation].getIndividual(indexInGeneration, clustered)->getIndexInGeneration(); break;
            case Individual::GlobalIndex: return generations[generation].getIndividual(indexInGeneration, clustered)->getGlobalIndex(); break;
            case Individual::NbMutations: return generations[generation].getIndividual(indexInGeneration, clustered)->getNbMutations(); break;
            case Individual::NbCrossovers: return generations[generation].getIndividual(indexInGeneration, clustered)->getNbCrossovers(); break;
            case Individual::Parent1: return generations[generation].getIndividual(indexInGeneration, clustered)->getParent1(); break;
            case Individual::Parent2: return generations[generation].getIndividual(indexInGeneration, clustered)->getParent2(); break;
            case Individual::GlobalScore: return (getIndividualProperty(generation, indexInGeneration, Individual::RoutesScore, clustered).toDouble() + getIndividualProperty(generation, indexInGeneration, Individual::DistanceScore, clustered).toDouble())/2.0; break;
            case Individual::Lifetime: return generations[generation].getIndividual(indexInGeneration, clustered)->getCluster(); break;
        }
    }
    return QVariant();
}

QVariant Population::getIndividualProperty(int globalIndex, int property) const
{
    if (globalIndex > -1 && globalIndex < nbGenerations * nbIndividualsPerGeneration)
    {
        return getIndividualProperty(globalIndex / nbIndividualsPerGeneration + 1, globalIndex % nbIndividualsPerGeneration, property);
    }
    return QVariant();
}

int Population::getNbGenerations() const
{
    return nbGenerations;
}

int Population::getNbClusters() const
{
    return nbClusters;
}

int Population::getNbIndividualsPerGeneration() const
{
    return nbIndividualsPerGeneration;
}

int Population::getNbObjectiveFunctions() const
{
    return nbObjectiveFunctions;
}
